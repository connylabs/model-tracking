-- +goose Up

-- +goose StatementBegin
CREATE OR REPLACE FUNCTION trigger_set_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;
-- +goose StatementEnd

CREATE TABLE ORGANIZATION (
	id INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
	name TEXT NOT NULL UNIQUE,
	created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TRIGGER set_timestamp_insert
  BEFORE INSERT ON ORGANIZATION
  FOR EACH ROW
  EXECUTE PROCEDURE trigger_set_timestamp();

CREATE TRIGGER set_timestamp_update
  BEFORE UPDATE ON ORGANIZATION
  FOR EACH ROW
  EXECUTE PROCEDURE trigger_set_timestamp();

CREATE TABLE MODEL (
	id INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
	name TEXT NOT NULL,
	organization INT NOT NULL,
	created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	FOREIGN KEY (organization) REFERENCES ORGANIZATION (id)
);

CREATE UNIQUE INDEX model_name_organization_index ON MODEL (name, organization);

CREATE TRIGGER set_timestamp_insert
  BEFORE INSERT ON MODEL
  FOR EACH ROW
  EXECUTE PROCEDURE trigger_set_timestamp();

CREATE TRIGGER set_timestamp_update
  BEFORE UPDATE ON MODEL
  FOR EACH ROW
  EXECUTE PROCEDURE trigger_set_timestamp();

CREATE TABLE SCHEMA (
	id INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
	name TEXT NOT NULL,
	input BYTEA NOT NULL,
	output BYTEA NOT NULL,
	organization INT NOT NULL,
	created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	FOREIGN KEY (organization) REFERENCES ORGANIZATION (id)
);

CREATE UNIQUE INDEX schema_name_organization_index ON SCHEMA (name, organization);

CREATE TRIGGER set_timestamp_insert
  BEFORE INSERT ON SCHEMA
  FOR EACH ROW
  EXECUTE PROCEDURE trigger_set_timestamp();

CREATE TRIGGER set_timestamp_update
  BEFORE UPDATE ON SCHEMA
  FOR EACH ROW
  EXECUTE PROCEDURE trigger_set_timestamp();

CREATE TABLE VERSION (
	id INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
	name TEXT NOT NULL,
	organization INT NOT NULL,
	model INT NOT NULL,
	schema INT NOT NULL,
	created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	FOREIGN KEY (organization) REFERENCES ORGANIZATION (id),
	FOREIGN KEY (model) REFERENCES MODEL (id),
	FOREIGN KEY (schema) REFERENCES SCHEMA (id)
);

CREATE UNIQUE INDEX version_name_model_organization_index ON VERSION (name, model, organization);

CREATE TRIGGER set_timestamp_insert
  BEFORE INSERT ON VERSION
  FOR EACH ROW
  EXECUTE PROCEDURE trigger_set_timestamp();

CREATE TRIGGER set_timestamp_update
  BEFORE UPDATE ON VERSION
  FOR EACH ROW
  EXECUTE PROCEDURE trigger_set_timestamp();

CREATE TABLE RESULT (
	id INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
	organization INT NOT NULL,
	model INT NOT NULL,
	version INT NOT NULL,
        input BYTEA NOT NULL,
        output BYTEA NOT NULL,
        true_output BYTEA NOT NULL,
        time TIMESTAMP NOT NULL,
	created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	FOREIGN KEY (organization) REFERENCES ORGANIZATION (id),
	FOREIGN KEY (model) REFERENCES MODEL (id),
	FOREIGN KEY (version) REFERENCES VERSION (id)
);

CREATE TRIGGER set_timestamp_insert
  BEFORE INSERT ON RESULT
  FOR EACH ROW
  EXECUTE PROCEDURE trigger_set_timestamp();

CREATE TRIGGER set_timestamp_update
  BEFORE UPDATE ON RESULT
  FOR EACH ROW
  EXECUTE PROCEDURE trigger_set_timestamp();

-- INSERT INTO MODEL (id, name) VALUES
-- (1, 'some-model'),

-- +goose Down
DROP TABLE IF EXISTS RESULT;
DROP TABLE IF EXISTS VERSION;
DROP TABLE IF EXISTS SCHEMA;
DROP TABLE IF EXISTS MODEL;
DROP TABLE IF EXISTS ORGANIZATION;
