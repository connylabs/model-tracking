//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Version = newVersionTable("public", "version", "")

type versionTable struct {
	postgres.Table

	//Columns
	ID           postgres.ColumnInteger
	Name         postgres.ColumnString
	Organization postgres.ColumnInteger
	Model        postgres.ColumnInteger
	Schema       postgres.ColumnInteger
	Created      postgres.ColumnTimestamp
	Updated      postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type VersionTable struct {
	versionTable

	EXCLUDED versionTable
}

// AS creates new VersionTable with assigned alias
func (a VersionTable) AS(alias string) *VersionTable {
	return newVersionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new VersionTable with assigned schema name
func (a VersionTable) FromSchema(schemaName string) *VersionTable {
	return newVersionTable(schemaName, a.TableName(), a.Alias())
}

func newVersionTable(schemaName, tableName, alias string) *VersionTable {
	return &VersionTable{
		versionTable: newVersionTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newVersionTableImpl("", "excluded", ""),
	}
}

func newVersionTableImpl(schemaName, tableName, alias string) versionTable {
	var (
		IDColumn           = postgres.IntegerColumn("id")
		NameColumn         = postgres.StringColumn("name")
		OrganizationColumn = postgres.IntegerColumn("organization")
		ModelColumn        = postgres.IntegerColumn("model")
		SchemaColumn       = postgres.IntegerColumn("schema")
		CreatedColumn      = postgres.TimestampColumn("created")
		UpdatedColumn      = postgres.TimestampColumn("updated")
		allColumns         = postgres.ColumnList{IDColumn, NameColumn, OrganizationColumn, ModelColumn, SchemaColumn, CreatedColumn, UpdatedColumn}
		mutableColumns     = postgres.ColumnList{NameColumn, OrganizationColumn, ModelColumn, SchemaColumn, CreatedColumn, UpdatedColumn}
	)

	return versionTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		Name:         NameColumn,
		Organization: OrganizationColumn,
		Model:        ModelColumn,
		Schema:       SchemaColumn,
		Created:      CreatedColumn,
		Updated:      UpdatedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
