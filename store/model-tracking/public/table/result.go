//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Result = newResultTable("public", "result", "")

type resultTable struct {
	postgres.Table

	//Columns
	ID           postgres.ColumnInteger
	Organization postgres.ColumnInteger
	Model        postgres.ColumnInteger
	Version      postgres.ColumnInteger
	Input        postgres.ColumnString
	Output       postgres.ColumnString
	TrueOutput   postgres.ColumnString
	Time         postgres.ColumnTimestamp
	Created      postgres.ColumnTimestamp
	Updated      postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ResultTable struct {
	resultTable

	EXCLUDED resultTable
}

// AS creates new ResultTable with assigned alias
func (a ResultTable) AS(alias string) *ResultTable {
	return newResultTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ResultTable with assigned schema name
func (a ResultTable) FromSchema(schemaName string) *ResultTable {
	return newResultTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ResultTable with assigned table prefix
func (a ResultTable) WithPrefix(prefix string) *ResultTable {
	return newResultTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ResultTable with assigned table suffix
func (a ResultTable) WithSuffix(suffix string) *ResultTable {
	return newResultTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newResultTable(schemaName, tableName, alias string) *ResultTable {
	return &ResultTable{
		resultTable: newResultTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newResultTableImpl("", "excluded", ""),
	}
}

func newResultTableImpl(schemaName, tableName, alias string) resultTable {
	var (
		IDColumn           = postgres.IntegerColumn("id")
		OrganizationColumn = postgres.IntegerColumn("organization")
		ModelColumn        = postgres.IntegerColumn("model")
		VersionColumn      = postgres.IntegerColumn("version")
		InputColumn        = postgres.StringColumn("input")
		OutputColumn       = postgres.StringColumn("output")
		TrueOutputColumn   = postgres.StringColumn("true_output")
		TimeColumn         = postgres.TimestampColumn("time")
		CreatedColumn      = postgres.TimestampColumn("created")
		UpdatedColumn      = postgres.TimestampColumn("updated")
		allColumns         = postgres.ColumnList{IDColumn, OrganizationColumn, ModelColumn, VersionColumn, InputColumn, OutputColumn, TrueOutputColumn, TimeColumn, CreatedColumn, UpdatedColumn}
		mutableColumns     = postgres.ColumnList{OrganizationColumn, ModelColumn, VersionColumn, InputColumn, OutputColumn, TrueOutputColumn, TimeColumn, CreatedColumn, UpdatedColumn}
	)

	return resultTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		Organization: OrganizationColumn,
		Model:        ModelColumn,
		Version:      VersionColumn,
		Input:        InputColumn,
		Output:       OutputColumn,
		TrueOutput:   TrueOutputColumn,
		Time:         TimeColumn,
		Created:      CreatedColumn,
		Updated:      UpdatedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
