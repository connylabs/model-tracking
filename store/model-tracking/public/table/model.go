//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Model = newModelTable("public", "model", "")

type modelTable struct {
	postgres.Table

	//Columns
	ID            postgres.ColumnInteger
	Name          postgres.ColumnString
	Organization  postgres.ColumnInteger
	Created       postgres.ColumnTimestamp
	Updated       postgres.ColumnTimestamp
	DefaultSchema postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ModelTable struct {
	modelTable

	EXCLUDED modelTable
}

// AS creates new ModelTable with assigned alias
func (a ModelTable) AS(alias string) *ModelTable {
	return newModelTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ModelTable with assigned schema name
func (a ModelTable) FromSchema(schemaName string) *ModelTable {
	return newModelTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ModelTable with assigned table prefix
func (a ModelTable) WithPrefix(prefix string) *ModelTable {
	return newModelTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ModelTable with assigned table suffix
func (a ModelTable) WithSuffix(suffix string) *ModelTable {
	return newModelTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newModelTable(schemaName, tableName, alias string) *ModelTable {
	return &ModelTable{
		modelTable: newModelTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newModelTableImpl("", "excluded", ""),
	}
}

func newModelTableImpl(schemaName, tableName, alias string) modelTable {
	var (
		IDColumn            = postgres.IntegerColumn("id")
		NameColumn          = postgres.StringColumn("name")
		OrganizationColumn  = postgres.IntegerColumn("organization")
		CreatedColumn       = postgres.TimestampColumn("created")
		UpdatedColumn       = postgres.TimestampColumn("updated")
		DefaultSchemaColumn = postgres.IntegerColumn("default_schema")
		allColumns          = postgres.ColumnList{IDColumn, NameColumn, OrganizationColumn, CreatedColumn, UpdatedColumn, DefaultSchemaColumn}
		mutableColumns      = postgres.ColumnList{NameColumn, OrganizationColumn, CreatedColumn, UpdatedColumn, DefaultSchemaColumn}
	)

	return modelTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		Name:          NameColumn,
		Organization:  OrganizationColumn,
		Created:       CreatedColumn,
		Updated:       UpdatedColumn,
		DefaultSchema: DefaultSchemaColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
